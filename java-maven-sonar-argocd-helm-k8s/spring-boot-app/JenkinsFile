pipeline {
 agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package' //This line cleans all builds and then compile and package the application into a .jar file
      }
    }
    stage('Static Code Analysis') {
      steps {
        withSonarQubeEnv('sonarqube') { 
          withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
            sh '''
              cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
              mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN
            '''
          }
        }
      }
    }
  stage('Quality Gate') {
      steps {
        script {
          timeout(time: 4, unit: 'MINUTES') { // Optional: avoid indefinite waiting
            def qualityGate = waitForQualityGate()
            echo "SonarQube Quality Gate status: ${qualityGate.status}"
            if (qualityGate.status != 'OK') {
              error "Pipeline failed due to quality gate: ${qualityGate.status}"
            }
          }
        }
      }
    }


    stage('Build and Push Docker Image') {
      steps {
        script {
          sh '''
            curl -fsSL https://download.docker.com/linux/static/stable/x86_64/docker-25.0.3.tgz -o docker.tgz
            tar -xzf docker.tgz
            chmod +x docker/docker
            mv docker/docker /usr/local/bin/docker

            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
            docker version
            docker build -t massaff/task4 .
          '''
          def dockerImage = docker.image("massaff/task4")
          docker.withRegistry('https://index.docker.io/v1/', "434ceb36-544c-4813-81b9-09e6ebd64dc4") {
            dockerImage.push()
            }
        }
      }
    }
    stage('Update Deployment File') {
        environment {
            GIT_REPO_NAME = "Jenkins-task"
            GIT_USER_NAME = "MostafaAssaff"
        }
        steps {
            withCredentials([string(credentialsId: '9e4d5f96-a8a3-4c5c-b59b-151b96dd9704', variable: 'GITHUB_TOKEN')]) {
                sh '''
                    git config user.email "mostafaassaaff@gmail.com"
                    git config user.name "Mostafa Assaf"
                    BUILD_NUMBER=${BUILD_NUMBER}
                    sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                '''
            }
        }
    }
  }
}
